#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bis_Mania_Ticketing
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BisManiaTicketing")]
	public partial class BMTDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertOtobus(Otobus instance);
    partial void UpdateOtobus(Otobus instance);
    partial void DeleteOtobus(Otobus instance);
    partial void InsertTicketType(TicketType instance);
    partial void UpdateTicketType(TicketType instance);
    partial void DeleteTicketType(TicketType instance);
    partial void InsertVenue(Venue instance);
    partial void UpdateVenue(Venue instance);
    partial void DeleteVenue(Venue instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertBus(Bus instance);
    partial void UpdateBus(Bus instance);
    partial void DeleteBus(Bus instance);
    partial void InsertPaymentMaster(PaymentMaster instance);
    partial void UpdatePaymentMaster(PaymentMaster instance);
    partial void DeletePaymentMaster(PaymentMaster instance);
    partial void InsertPaymentDetail(PaymentDetail instance);
    partial void UpdatePaymentDetail(PaymentDetail instance);
    partial void DeletePaymentDetail(PaymentDetail instance);
    partial void InsertSeat(Seat instance);
    partial void UpdateSeat(Seat instance);
    partial void DeleteSeat(Seat instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertOtobusTicketTypeRoute(OtobusTicketTypeRoute instance);
    partial void UpdateOtobusTicketTypeRoute(OtobusTicketTypeRoute instance);
    partial void DeleteOtobusTicketTypeRoute(OtobusTicketTypeRoute instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertBooking(Booking instance);
    partial void UpdateBooking(Booking instance);
    partial void DeleteBooking(Booking instance);
    partial void InsertGenderList(GenderList instance);
    partial void UpdateGenderList(GenderList instance);
    partial void DeleteGenderList(GenderList instance);
    partial void InsertPassenger(Passenger instance);
    partial void UpdatePassenger(Passenger instance);
    partial void DeletePassenger(Passenger instance);
    #endregion
		
		public BMTDataContext() : 
				base(global::Bis_Mania_Ticketing.Properties.Settings.Default.BisManiaTicketingConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BMTDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BMTDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BMTDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BMTDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Otobus> Otobus
		{
			get
			{
				return this.GetTable<Otobus>();
			}
		}
		
		public System.Data.Linq.Table<TicketType> TicketTypes
		{
			get
			{
				return this.GetTable<TicketType>();
			}
		}
		
		public System.Data.Linq.Table<Venue> Venues
		{
			get
			{
				return this.GetTable<Venue>();
			}
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<Bus> Bus
		{
			get
			{
				return this.GetTable<Bus>();
			}
		}
		
		public System.Data.Linq.Table<PaymentMaster> PaymentMasters
		{
			get
			{
				return this.GetTable<PaymentMaster>();
			}
		}
		
		public System.Data.Linq.Table<PaymentDetail> PaymentDetails
		{
			get
			{
				return this.GetTable<PaymentDetail>();
			}
		}
		
		public System.Data.Linq.Table<Seat> Seats
		{
			get
			{
				return this.GetTable<Seat>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<OtobusTicketTypeRoute> OtobusTicketTypeRoutes
		{
			get
			{
				return this.GetTable<OtobusTicketTypeRoute>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Booking> Bookings
		{
			get
			{
				return this.GetTable<Booking>();
			}
		}
		
		public System.Data.Linq.Table<GenderList> GenderLists
		{
			get
			{
				return this.GetTable<GenderList>();
			}
		}
		
		public System.Data.Linq.Table<Passenger> Passengers
		{
			get
			{
				return this.GetTable<Passenger>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteBus")]
		public int DeleteBus([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IdBus", DbType="Int")] System.Nullable<int> idBus)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idBus);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Otobus")]
	public partial class Otobus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _OtobusName;
		
		private EntitySet<Bus> _Bus;
		
		private EntitySet<OtobusTicketTypeRoute> _OtobusTicketTypeRoutes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOtobusNameChanging(string value);
    partial void OnOtobusNameChanged();
    #endregion
		
		public Otobus()
		{
			this._Bus = new EntitySet<Bus>(new Action<Bus>(this.attach_Bus), new Action<Bus>(this.detach_Bus));
			this._OtobusTicketTypeRoutes = new EntitySet<OtobusTicketTypeRoute>(new Action<OtobusTicketTypeRoute>(this.attach_OtobusTicketTypeRoutes), new Action<OtobusTicketTypeRoute>(this.detach_OtobusTicketTypeRoutes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtobusName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OtobusName
		{
			get
			{
				return this._OtobusName;
			}
			set
			{
				if ((this._OtobusName != value))
				{
					this.OnOtobusNameChanging(value);
					this.SendPropertyChanging();
					this._OtobusName = value;
					this.SendPropertyChanged("OtobusName");
					this.OnOtobusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Otobus_Bus", Storage="_Bus", ThisKey="Id", OtherKey="IdOtobus")]
		public EntitySet<Bus> Bus
		{
			get
			{
				return this._Bus;
			}
			set
			{
				this._Bus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Otobus_OtobusTicketTypeRoute", Storage="_OtobusTicketTypeRoutes", ThisKey="Id", OtherKey="IdOtobus")]
		public EntitySet<OtobusTicketTypeRoute> OtobusTicketTypeRoutes
		{
			get
			{
				return this._OtobusTicketTypeRoutes;
			}
			set
			{
				this._OtobusTicketTypeRoutes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Otobus = this;
		}
		
		private void detach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Otobus = null;
		}
		
		private void attach_OtobusTicketTypeRoutes(OtobusTicketTypeRoute entity)
		{
			this.SendPropertyChanging();
			entity.Otobus = this;
		}
		
		private void detach_OtobusTicketTypeRoutes(OtobusTicketTypeRoute entity)
		{
			this.SendPropertyChanging();
			entity.Otobus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketType")]
	public partial class TicketType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TicketName;
		
		private EntitySet<Bus> _Bus;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntitySet<OtobusTicketTypeRoute> _OtobusTicketTypeRoutes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTicketNameChanging(string value);
    partial void OnTicketNameChanged();
    #endregion
		
		public TicketType()
		{
			this._Bus = new EntitySet<Bus>(new Action<Bus>(this.attach_Bus), new Action<Bus>(this.detach_Bus));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._OtobusTicketTypeRoutes = new EntitySet<OtobusTicketTypeRoute>(new Action<OtobusTicketTypeRoute>(this.attach_OtobusTicketTypeRoutes), new Action<OtobusTicketTypeRoute>(this.detach_OtobusTicketTypeRoutes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TicketName
		{
			get
			{
				return this._TicketName;
			}
			set
			{
				if ((this._TicketName != value))
				{
					this.OnTicketNameChanging(value);
					this.SendPropertyChanging();
					this._TicketName = value;
					this.SendPropertyChanged("TicketName");
					this.OnTicketNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketType_Bus", Storage="_Bus", ThisKey="Id", OtherKey="IdTicketType")]
		public EntitySet<Bus> Bus
		{
			get
			{
				return this._Bus;
			}
			set
			{
				this._Bus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketType_Ticket", Storage="_Tickets", ThisKey="Id", OtherKey="IdTicketType")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketType_OtobusTicketTypeRoute", Storage="_OtobusTicketTypeRoutes", ThisKey="Id", OtherKey="IdTicketType")]
		public EntitySet<OtobusTicketTypeRoute> OtobusTicketTypeRoutes
		{
			get
			{
				return this._OtobusTicketTypeRoutes;
			}
			set
			{
				this._OtobusTicketTypeRoutes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.TicketType = this;
		}
		
		private void detach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.TicketType = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.TicketType = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.TicketType = null;
		}
		
		private void attach_OtobusTicketTypeRoutes(OtobusTicketTypeRoute entity)
		{
			this.SendPropertyChanging();
			entity.TicketType = this;
		}
		
		private void detach_OtobusTicketTypeRoutes(OtobusTicketTypeRoute entity)
		{
			this.SendPropertyChanging();
			entity.TicketType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Venue")]
	public partial class Venue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _VenueName;
		
		private string _VenueLocation;
		
		private EntitySet<Route> _Routes;
		
		private EntitySet<Route> _Routes1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVenueNameChanging(string value);
    partial void OnVenueNameChanged();
    partial void OnVenueLocationChanging(string value);
    partial void OnVenueLocationChanged();
    #endregion
		
		public Venue()
		{
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			this._Routes1 = new EntitySet<Route>(new Action<Route>(this.attach_Routes1), new Action<Route>(this.detach_Routes1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string VenueName
		{
			get
			{
				return this._VenueName;
			}
			set
			{
				if ((this._VenueName != value))
				{
					this.OnVenueNameChanging(value);
					this.SendPropertyChanging();
					this._VenueName = value;
					this.SendPropertyChanged("VenueName");
					this.OnVenueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueLocation", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string VenueLocation
		{
			get
			{
				return this._VenueLocation;
			}
			set
			{
				if ((this._VenueLocation != value))
				{
					this.OnVenueLocationChanging(value);
					this.SendPropertyChanging();
					this._VenueLocation = value;
					this.SendPropertyChanged("VenueLocation");
					this.OnVenueLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venue_Route", Storage="_Routes", ThisKey="Id", OtherKey="RouteDeparture")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venue_Route1", Storage="_Routes1", ThisKey="Id", OtherKey="RouteDestination")]
		public EntitySet<Route> Routes1
		{
			get
			{
				return this._Routes1;
			}
			set
			{
				this._Routes1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Venue = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Venue = null;
		}
		
		private void attach_Routes1(Route entity)
		{
			this.SendPropertyChanging();
			entity.Venue1 = this;
		}
		
		private void detach_Routes1(Route entity)
		{
			this.SendPropertyChanging();
			entity.Venue1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Route")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RouteDeparture;
		
		private int _RouteDestination;
		
		private EntitySet<OtobusTicketTypeRoute> _OtobusTicketTypeRoutes;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntityRef<Venue> _Venue;
		
		private EntityRef<Venue> _Venue1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRouteDepartureChanging(int value);
    partial void OnRouteDepartureChanged();
    partial void OnRouteDestinationChanging(int value);
    partial void OnRouteDestinationChanged();
    #endregion
		
		public Route()
		{
			this._OtobusTicketTypeRoutes = new EntitySet<OtobusTicketTypeRoute>(new Action<OtobusTicketTypeRoute>(this.attach_OtobusTicketTypeRoutes), new Action<OtobusTicketTypeRoute>(this.detach_OtobusTicketTypeRoutes));
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Venue = default(EntityRef<Venue>);
			this._Venue1 = default(EntityRef<Venue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteDeparture", DbType="Int NOT NULL")]
		public int RouteDeparture
		{
			get
			{
				return this._RouteDeparture;
			}
			set
			{
				if ((this._RouteDeparture != value))
				{
					if (this._Venue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteDepartureChanging(value);
					this.SendPropertyChanging();
					this._RouteDeparture = value;
					this.SendPropertyChanged("RouteDeparture");
					this.OnRouteDepartureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteDestination", DbType="Int NOT NULL")]
		public int RouteDestination
		{
			get
			{
				return this._RouteDestination;
			}
			set
			{
				if ((this._RouteDestination != value))
				{
					if (this._Venue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteDestinationChanging(value);
					this.SendPropertyChanging();
					this._RouteDestination = value;
					this.SendPropertyChanged("RouteDestination");
					this.OnRouteDestinationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_OtobusTicketTypeRoute", Storage="_OtobusTicketTypeRoutes", ThisKey="Id", OtherKey="IdRoute")]
		public EntitySet<OtobusTicketTypeRoute> OtobusTicketTypeRoutes
		{
			get
			{
				return this._OtobusTicketTypeRoutes;
			}
			set
			{
				this._OtobusTicketTypeRoutes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Schedule", Storage="_Schedules", ThisKey="Id", OtherKey="IdRoute")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venue_Route", Storage="_Venue", ThisKey="RouteDeparture", OtherKey="Id", IsForeignKey=true)]
		public Venue Venue
		{
			get
			{
				return this._Venue.Entity;
			}
			set
			{
				Venue previousValue = this._Venue.Entity;
				if (((previousValue != value) 
							|| (this._Venue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venue.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._Venue.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._RouteDeparture = value.Id;
					}
					else
					{
						this._RouteDeparture = default(int);
					}
					this.SendPropertyChanged("Venue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venue_Route1", Storage="_Venue1", ThisKey="RouteDestination", OtherKey="Id", IsForeignKey=true)]
		public Venue Venue1
		{
			get
			{
				return this._Venue1.Entity;
			}
			set
			{
				Venue previousValue = this._Venue1.Entity;
				if (((previousValue != value) 
							|| (this._Venue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venue1.Entity = null;
						previousValue.Routes1.Remove(this);
					}
					this._Venue1.Entity = value;
					if ((value != null))
					{
						value.Routes1.Add(this);
						this._RouteDestination = value.Id;
					}
					else
					{
						this._RouteDestination = default(int);
					}
					this.SendPropertyChanged("Venue1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OtobusTicketTypeRoutes(OtobusTicketTypeRoute entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_OtobusTicketTypeRoutes(OtobusTicketTypeRoute entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bus")]
	public partial class Bus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdOtobus;
		
		private int _IdTicketType;
		
		private string _BusNumber;
		
		private string _BusModel;
		
		private int _TotalSeat;
		
		private byte _Active;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntityRef<Otobus> _Otobus;
		
		private EntityRef<TicketType> _TicketType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdOtobusChanging(int value);
    partial void OnIdOtobusChanged();
    partial void OnIdTicketTypeChanging(int value);
    partial void OnIdTicketTypeChanged();
    partial void OnBusNumberChanging(string value);
    partial void OnBusNumberChanged();
    partial void OnBusModelChanging(string value);
    partial void OnBusModelChanged();
    partial void OnTotalSeatChanging(int value);
    partial void OnTotalSeatChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    #endregion
		
		public Bus()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Otobus = default(EntityRef<Otobus>);
			this._TicketType = default(EntityRef<TicketType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdOtobus", DbType="Int NOT NULL")]
		public int IdOtobus
		{
			get
			{
				return this._IdOtobus;
			}
			set
			{
				if ((this._IdOtobus != value))
				{
					if (this._Otobus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdOtobusChanging(value);
					this.SendPropertyChanging();
					this._IdOtobus = value;
					this.SendPropertyChanged("IdOtobus");
					this.OnIdOtobusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTicketType", DbType="Int NOT NULL")]
		public int IdTicketType
		{
			get
			{
				return this._IdTicketType;
			}
			set
			{
				if ((this._IdTicketType != value))
				{
					if (this._TicketType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTicketTypeChanging(value);
					this.SendPropertyChanging();
					this._IdTicketType = value;
					this.SendPropertyChanged("IdTicketType");
					this.OnIdTicketTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusNumber", AutoSync=AutoSync.Always, DbType="VarChar(11)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string BusNumber
		{
			get
			{
				return this._BusNumber;
			}
			set
			{
				if ((this._BusNumber != value))
				{
					this.OnBusNumberChanging(value);
					this.SendPropertyChanging();
					this._BusNumber = value;
					this.SendPropertyChanged("BusNumber");
					this.OnBusNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusModel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusModel
		{
			get
			{
				return this._BusModel;
			}
			set
			{
				if ((this._BusModel != value))
				{
					this.OnBusModelChanging(value);
					this.SendPropertyChanging();
					this._BusModel = value;
					this.SendPropertyChanged("BusModel");
					this.OnBusModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalSeat", DbType="Int NOT NULL")]
		public int TotalSeat
		{
			get
			{
				return this._TotalSeat;
			}
			set
			{
				if ((this._TotalSeat != value))
				{
					this.OnTotalSeatChanging(value);
					this.SendPropertyChanging();
					this._TotalSeat = value;
					this.SendPropertyChanged("TotalSeat");
					this.OnTotalSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_Schedule", Storage="_Schedules", ThisKey="Id", OtherKey="IdBus")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Otobus_Bus", Storage="_Otobus", ThisKey="IdOtobus", OtherKey="Id", IsForeignKey=true)]
		public Otobus Otobus
		{
			get
			{
				return this._Otobus.Entity;
			}
			set
			{
				Otobus previousValue = this._Otobus.Entity;
				if (((previousValue != value) 
							|| (this._Otobus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Otobus.Entity = null;
						previousValue.Bus.Remove(this);
					}
					this._Otobus.Entity = value;
					if ((value != null))
					{
						value.Bus.Add(this);
						this._IdOtobus = value.Id;
					}
					else
					{
						this._IdOtobus = default(int);
					}
					this.SendPropertyChanged("Otobus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketType_Bus", Storage="_TicketType", ThisKey="IdTicketType", OtherKey="Id", IsForeignKey=true)]
		public TicketType TicketType
		{
			get
			{
				return this._TicketType.Entity;
			}
			set
			{
				TicketType previousValue = this._TicketType.Entity;
				if (((previousValue != value) 
							|| (this._TicketType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketType.Entity = null;
						previousValue.Bus.Remove(this);
					}
					this._TicketType.Entity = value;
					if ((value != null))
					{
						value.Bus.Add(this);
						this._IdTicketType = value.Id;
					}
					else
					{
						this._IdTicketType = default(int);
					}
					this.SendPropertyChanged("TicketType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Bus = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Bus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentMaster")]
	public partial class PaymentMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _InvoiceNumber;
		
		private int _IdBooking;
		
		private int _IdPassenger;
		
		private System.Nullable<System.DateTime> _PaymentTime;
		
		private EntitySet<PaymentDetail> _PaymentDetails;
		
		private EntityRef<Booking> _Booking;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInvoiceNumberChanging(string value);
    partial void OnInvoiceNumberChanged();
    partial void OnIdBookingChanging(int value);
    partial void OnIdBookingChanged();
    partial void OnIdPassengerChanging(int value);
    partial void OnIdPassengerChanged();
    partial void OnPaymentTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentTimeChanged();
    #endregion
		
		public PaymentMaster()
		{
			this._PaymentDetails = new EntitySet<PaymentDetail>(new Action<PaymentDetail>(this.attach_PaymentDetails), new Action<PaymentDetail>(this.detach_PaymentDetails));
			this._Booking = default(EntityRef<Booking>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNumber", AutoSync=AutoSync.Always, DbType="VarChar(15)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string InvoiceNumber
		{
			get
			{
				return this._InvoiceNumber;
			}
			set
			{
				if ((this._InvoiceNumber != value))
				{
					this.OnInvoiceNumberChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNumber = value;
					this.SendPropertyChanged("InvoiceNumber");
					this.OnInvoiceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBooking", DbType="Int NOT NULL")]
		public int IdBooking
		{
			get
			{
				return this._IdBooking;
			}
			set
			{
				if ((this._IdBooking != value))
				{
					if (this._Booking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdBookingChanging(value);
					this.SendPropertyChanging();
					this._IdBooking = value;
					this.SendPropertyChanged("IdBooking");
					this.OnIdBookingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPassenger", DbType="Int NOT NULL")]
		public int IdPassenger
		{
			get
			{
				return this._IdPassenger;
			}
			set
			{
				if ((this._IdPassenger != value))
				{
					this.OnIdPassengerChanging(value);
					this.SendPropertyChanging();
					this._IdPassenger = value;
					this.SendPropertyChanged("IdPassenger");
					this.OnIdPassengerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> PaymentTime
		{
			get
			{
				return this._PaymentTime;
			}
			set
			{
				if ((this._PaymentTime != value))
				{
					this.OnPaymentTimeChanging(value);
					this.SendPropertyChanging();
					this._PaymentTime = value;
					this.SendPropertyChanged("PaymentTime");
					this.OnPaymentTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMaster_PaymentDetail", Storage="_PaymentDetails", ThisKey="Id", OtherKey="IdPaymentMaster")]
		public EntitySet<PaymentDetail> PaymentDetails
		{
			get
			{
				return this._PaymentDetails;
			}
			set
			{
				this._PaymentDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_PaymentMaster", Storage="_Booking", ThisKey="IdBooking", OtherKey="Id", IsForeignKey=true)]
		public Booking Booking
		{
			get
			{
				return this._Booking.Entity;
			}
			set
			{
				Booking previousValue = this._Booking.Entity;
				if (((previousValue != value) 
							|| (this._Booking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Booking.Entity = null;
						previousValue.PaymentMasters.Remove(this);
					}
					this._Booking.Entity = value;
					if ((value != null))
					{
						value.PaymentMasters.Add(this);
						this._IdBooking = value.Id;
					}
					else
					{
						this._IdBooking = default(int);
					}
					this.SendPropertyChanged("Booking");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentDetails(PaymentDetail entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMaster = this;
		}
		
		private void detach_PaymentDetails(PaymentDetail entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentDetail")]
	public partial class PaymentDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPaymentMaster;
		
		private int _IdTicket;
		
		private double _Price;
		
		private EntityRef<PaymentMaster> _PaymentMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPaymentMasterChanging(int value);
    partial void OnIdPaymentMasterChanged();
    partial void OnIdTicketChanging(int value);
    partial void OnIdTicketChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    #endregion
		
		public PaymentDetail()
		{
			this._PaymentMaster = default(EntityRef<PaymentMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPaymentMaster", DbType="Int NOT NULL")]
		public int IdPaymentMaster
		{
			get
			{
				return this._IdPaymentMaster;
			}
			set
			{
				if ((this._IdPaymentMaster != value))
				{
					if (this._PaymentMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPaymentMasterChanging(value);
					this.SendPropertyChanging();
					this._IdPaymentMaster = value;
					this.SendPropertyChanged("IdPaymentMaster");
					this.OnIdPaymentMasterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTicket", DbType="Int NOT NULL")]
		public int IdTicket
		{
			get
			{
				return this._IdTicket;
			}
			set
			{
				if ((this._IdTicket != value))
				{
					this.OnIdTicketChanging(value);
					this.SendPropertyChanging();
					this._IdTicket = value;
					this.SendPropertyChanged("IdTicket");
					this.OnIdTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMaster_PaymentDetail", Storage="_PaymentMaster", ThisKey="IdPaymentMaster", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PaymentMaster PaymentMaster
		{
			get
			{
				return this._PaymentMaster.Entity;
			}
			set
			{
				PaymentMaster previousValue = this._PaymentMaster.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMaster.Entity = null;
						previousValue.PaymentDetails.Remove(this);
					}
					this._PaymentMaster.Entity = value;
					if ((value != null))
					{
						value.PaymentDetails.Add(this);
						this._IdPaymentMaster = value.Id;
					}
					else
					{
						this._IdPaymentMaster = default(int);
					}
					this.SendPropertyChanged("PaymentMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seats")]
	public partial class Seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdSchedule;
		
		private string _SeatsNumber;
		
		private byte _Available;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<Schedule> _Schedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdScheduleChanging(int value);
    partial void OnIdScheduleChanged();
    partial void OnSeatsNumberChanging(string value);
    partial void OnSeatsNumberChanged();
    partial void OnAvailableChanging(byte value);
    partial void OnAvailableChanged();
    #endregion
		
		public Seat()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Schedule = default(EntityRef<Schedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSchedule", DbType="Int NOT NULL")]
		public int IdSchedule
		{
			get
			{
				return this._IdSchedule;
			}
			set
			{
				if ((this._IdSchedule != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdScheduleChanging(value);
					this.SendPropertyChanging();
					this._IdSchedule = value;
					this.SendPropertyChanged("IdSchedule");
					this.OnIdScheduleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatsNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SeatsNumber
		{
			get
			{
				return this._SeatsNumber;
			}
			set
			{
				if ((this._SeatsNumber != value))
				{
					this.OnSeatsNumberChanging(value);
					this.SendPropertyChanging();
					this._SeatsNumber = value;
					this.SendPropertyChanged("SeatsNumber");
					this.OnSeatsNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="TinyInt NOT NULL")]
		public byte Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Ticket", Storage="_Tickets", ThisKey="Id", OtherKey="IdSeat")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Seat", Storage="_Schedule", ThisKey="IdSchedule", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.Seats.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.Seats.Add(this);
						this._IdSchedule = value.Id;
					}
					else
					{
						this._IdSchedule = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Seat = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Seat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ticket")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdBooking;
		
		private int _IdPassenger;
		
		private int _IdSeat;
		
		private int _IdTicketType;
		
		private double _Price;
		
		private EntityRef<Seat> _Seat;
		
		private EntityRef<TicketType> _TicketType;
		
		private EntityRef<Booking> _Booking;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdBookingChanging(int value);
    partial void OnIdBookingChanged();
    partial void OnIdPassengerChanging(int value);
    partial void OnIdPassengerChanged();
    partial void OnIdSeatChanging(int value);
    partial void OnIdSeatChanged();
    partial void OnIdTicketTypeChanging(int value);
    partial void OnIdTicketTypeChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    #endregion
		
		public Ticket()
		{
			this._Seat = default(EntityRef<Seat>);
			this._TicketType = default(EntityRef<TicketType>);
			this._Booking = default(EntityRef<Booking>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBooking", DbType="Int NOT NULL")]
		public int IdBooking
		{
			get
			{
				return this._IdBooking;
			}
			set
			{
				if ((this._IdBooking != value))
				{
					if (this._Booking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdBookingChanging(value);
					this.SendPropertyChanging();
					this._IdBooking = value;
					this.SendPropertyChanged("IdBooking");
					this.OnIdBookingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPassenger", DbType="Int NOT NULL")]
		public int IdPassenger
		{
			get
			{
				return this._IdPassenger;
			}
			set
			{
				if ((this._IdPassenger != value))
				{
					this.OnIdPassengerChanging(value);
					this.SendPropertyChanging();
					this._IdPassenger = value;
					this.SendPropertyChanged("IdPassenger");
					this.OnIdPassengerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSeat", DbType="Int NOT NULL")]
		public int IdSeat
		{
			get
			{
				return this._IdSeat;
			}
			set
			{
				if ((this._IdSeat != value))
				{
					if (this._Seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSeatChanging(value);
					this.SendPropertyChanging();
					this._IdSeat = value;
					this.SendPropertyChanged("IdSeat");
					this.OnIdSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTicketType", DbType="Int NOT NULL")]
		public int IdTicketType
		{
			get
			{
				return this._IdTicketType;
			}
			set
			{
				if ((this._IdTicketType != value))
				{
					if (this._TicketType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTicketTypeChanging(value);
					this.SendPropertyChanging();
					this._IdTicketType = value;
					this.SendPropertyChanged("IdTicketType");
					this.OnIdTicketTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Ticket", Storage="_Seat", ThisKey="IdSeat", OtherKey="Id", IsForeignKey=true)]
		public Seat Seat
		{
			get
			{
				return this._Seat.Entity;
			}
			set
			{
				Seat previousValue = this._Seat.Entity;
				if (((previousValue != value) 
							|| (this._Seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Seat.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._IdSeat = value.Id;
					}
					else
					{
						this._IdSeat = default(int);
					}
					this.SendPropertyChanged("Seat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketType_Ticket", Storage="_TicketType", ThisKey="IdTicketType", OtherKey="Id", IsForeignKey=true)]
		public TicketType TicketType
		{
			get
			{
				return this._TicketType.Entity;
			}
			set
			{
				TicketType previousValue = this._TicketType.Entity;
				if (((previousValue != value) 
							|| (this._TicketType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketType.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._TicketType.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._IdTicketType = value.Id;
					}
					else
					{
						this._IdTicketType = default(int);
					}
					this.SendPropertyChanged("TicketType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_Ticket", Storage="_Booking", ThisKey="IdBooking", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Booking Booking
		{
			get
			{
				return this._Booking.Entity;
			}
			set
			{
				Booking previousValue = this._Booking.Entity;
				if (((previousValue != value) 
							|| (this._Booking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Booking.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Booking.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._IdBooking = value.Id;
					}
					else
					{
						this._IdBooking = default(int);
					}
					this.SendPropertyChanged("Booking");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OtobusTicketTypeRoute")]
	public partial class OtobusTicketTypeRoute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdOtobus;
		
		private int _IdTicketType;
		
		private int _IdRoute;
		
		private decimal _Price;
		
		private EntityRef<Otobus> _Otobus;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<TicketType> _TicketType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdOtobusChanging(int value);
    partial void OnIdOtobusChanged();
    partial void OnIdTicketTypeChanging(int value);
    partial void OnIdTicketTypeChanged();
    partial void OnIdRouteChanging(int value);
    partial void OnIdRouteChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public OtobusTicketTypeRoute()
		{
			this._Otobus = default(EntityRef<Otobus>);
			this._Route = default(EntityRef<Route>);
			this._TicketType = default(EntityRef<TicketType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdOtobus", DbType="Int NOT NULL")]
		public int IdOtobus
		{
			get
			{
				return this._IdOtobus;
			}
			set
			{
				if ((this._IdOtobus != value))
				{
					if (this._Otobus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdOtobusChanging(value);
					this.SendPropertyChanging();
					this._IdOtobus = value;
					this.SendPropertyChanged("IdOtobus");
					this.OnIdOtobusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTicketType", DbType="Int NOT NULL")]
		public int IdTicketType
		{
			get
			{
				return this._IdTicketType;
			}
			set
			{
				if ((this._IdTicketType != value))
				{
					if (this._TicketType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTicketTypeChanging(value);
					this.SendPropertyChanging();
					this._IdTicketType = value;
					this.SendPropertyChanged("IdTicketType");
					this.OnIdTicketTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRoute", DbType="Int NOT NULL")]
		public int IdRoute
		{
			get
			{
				return this._IdRoute;
			}
			set
			{
				if ((this._IdRoute != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRouteChanging(value);
					this.SendPropertyChanging();
					this._IdRoute = value;
					this.SendPropertyChanged("IdRoute");
					this.OnIdRouteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(22,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Otobus_OtobusTicketTypeRoute", Storage="_Otobus", ThisKey="IdOtobus", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Otobus Otobus
		{
			get
			{
				return this._Otobus.Entity;
			}
			set
			{
				Otobus previousValue = this._Otobus.Entity;
				if (((previousValue != value) 
							|| (this._Otobus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Otobus.Entity = null;
						previousValue.OtobusTicketTypeRoutes.Remove(this);
					}
					this._Otobus.Entity = value;
					if ((value != null))
					{
						value.OtobusTicketTypeRoutes.Add(this);
						this._IdOtobus = value.Id;
					}
					else
					{
						this._IdOtobus = default(int);
					}
					this.SendPropertyChanged("Otobus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_OtobusTicketTypeRoute", Storage="_Route", ThisKey="IdRoute", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.OtobusTicketTypeRoutes.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.OtobusTicketTypeRoutes.Add(this);
						this._IdRoute = value.Id;
					}
					else
					{
						this._IdRoute = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketType_OtobusTicketTypeRoute", Storage="_TicketType", ThisKey="IdTicketType", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TicketType TicketType
		{
			get
			{
				return this._TicketType.Entity;
			}
			set
			{
				TicketType previousValue = this._TicketType.Entity;
				if (((previousValue != value) 
							|| (this._TicketType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketType.Entity = null;
						previousValue.OtobusTicketTypeRoutes.Remove(this);
					}
					this._TicketType.Entity = value;
					if ((value != null))
					{
						value.OtobusTicketTypeRoutes.Add(this);
						this._IdTicketType = value.Id;
					}
					else
					{
						this._IdTicketType = default(int);
					}
					this.SendPropertyChanged("TicketType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdBus;
		
		private int _IdRoute;
		
		private decimal _FinalPrice;
		
		private System.DateTime _Time;
		
		private EntitySet<Seat> _Seats;
		
		private EntitySet<Booking> _Bookings;
		
		private EntityRef<Bus> _Bus;
		
		private EntityRef<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdBusChanging(int value);
    partial void OnIdBusChanged();
    partial void OnIdRouteChanging(int value);
    partial void OnIdRouteChanged();
    partial void OnFinalPriceChanging(decimal value);
    partial void OnFinalPriceChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public Schedule()
		{
			this._Seats = new EntitySet<Seat>(new Action<Seat>(this.attach_Seats), new Action<Seat>(this.detach_Seats));
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			this._Bus = default(EntityRef<Bus>);
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBus", DbType="Int NOT NULL")]
		public int IdBus
		{
			get
			{
				return this._IdBus;
			}
			set
			{
				if ((this._IdBus != value))
				{
					if (this._Bus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdBusChanging(value);
					this.SendPropertyChanging();
					this._IdBus = value;
					this.SendPropertyChanged("IdBus");
					this.OnIdBusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRoute", DbType="Int NOT NULL")]
		public int IdRoute
		{
			get
			{
				return this._IdRoute;
			}
			set
			{
				if ((this._IdRoute != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRouteChanging(value);
					this.SendPropertyChanging();
					this._IdRoute = value;
					this.SendPropertyChanged("IdRoute");
					this.OnIdRouteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalPrice", DbType="Decimal(22,0) NOT NULL")]
		public decimal FinalPrice
		{
			get
			{
				return this._FinalPrice;
			}
			set
			{
				if ((this._FinalPrice != value))
				{
					this.OnFinalPriceChanging(value);
					this.SendPropertyChanging();
					this._FinalPrice = value;
					this.SendPropertyChanged("FinalPrice");
					this.OnFinalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Seat", Storage="_Seats", ThisKey="Id", OtherKey="IdSchedule")]
		public EntitySet<Seat> Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				this._Seats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Booking", Storage="_Bookings", ThisKey="Id", OtherKey="IdSchedule")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_Schedule", Storage="_Bus", ThisKey="IdBus", OtherKey="Id", IsForeignKey=true)]
		public Bus Bus
		{
			get
			{
				return this._Bus.Entity;
			}
			set
			{
				Bus previousValue = this._Bus.Entity;
				if (((previousValue != value) 
							|| (this._Bus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bus.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Bus.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._IdBus = value.Id;
					}
					else
					{
						this._IdBus = default(int);
					}
					this.SendPropertyChanged("Bus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Schedule", Storage="_Route", ThisKey="IdRoute", OtherKey="Id", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._IdRoute = value.Id;
					}
					else
					{
						this._IdRoute = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Booking")]
	public partial class Booking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdSchedule;
		
		private int _IdPassenger;
		
		private System.DateTime _BookingTime;
		
		private byte _Paid;
		
		private EntitySet<PaymentMaster> _PaymentMasters;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<Passenger> _Passenger;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdScheduleChanging(int value);
    partial void OnIdScheduleChanged();
    partial void OnIdPassengerChanging(int value);
    partial void OnIdPassengerChanged();
    partial void OnBookingTimeChanging(System.DateTime value);
    partial void OnBookingTimeChanged();
    partial void OnPaidChanging(byte value);
    partial void OnPaidChanged();
    #endregion
		
		public Booking()
		{
			this._PaymentMasters = new EntitySet<PaymentMaster>(new Action<PaymentMaster>(this.attach_PaymentMasters), new Action<PaymentMaster>(this.detach_PaymentMasters));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Schedule = default(EntityRef<Schedule>);
			this._Passenger = default(EntityRef<Passenger>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSchedule", DbType="Int NOT NULL")]
		public int IdSchedule
		{
			get
			{
				return this._IdSchedule;
			}
			set
			{
				if ((this._IdSchedule != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdScheduleChanging(value);
					this.SendPropertyChanging();
					this._IdSchedule = value;
					this.SendPropertyChanged("IdSchedule");
					this.OnIdScheduleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPassenger", DbType="Int NOT NULL")]
		public int IdPassenger
		{
			get
			{
				return this._IdPassenger;
			}
			set
			{
				if ((this._IdPassenger != value))
				{
					if (this._Passenger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPassengerChanging(value);
					this.SendPropertyChanging();
					this._IdPassenger = value;
					this.SendPropertyChanged("IdPassenger");
					this.OnIdPassengerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingTime", DbType="DateTime NOT NULL")]
		public System.DateTime BookingTime
		{
			get
			{
				return this._BookingTime;
			}
			set
			{
				if ((this._BookingTime != value))
				{
					this.OnBookingTimeChanging(value);
					this.SendPropertyChanging();
					this._BookingTime = value;
					this.SendPropertyChanged("BookingTime");
					this.OnBookingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="TinyInt NOT NULL")]
		public byte Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this.OnPaidChanging(value);
					this.SendPropertyChanging();
					this._Paid = value;
					this.SendPropertyChanged("Paid");
					this.OnPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_PaymentMaster", Storage="_PaymentMasters", ThisKey="Id", OtherKey="IdBooking")]
		public EntitySet<PaymentMaster> PaymentMasters
		{
			get
			{
				return this._PaymentMasters;
			}
			set
			{
				this._PaymentMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_Ticket", Storage="_Tickets", ThisKey="Id", OtherKey="IdBooking")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Booking", Storage="_Schedule", ThisKey="IdSchedule", OtherKey="Id", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._IdSchedule = value.Id;
					}
					else
					{
						this._IdSchedule = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Booking", Storage="_Passenger", ThisKey="IdPassenger", OtherKey="Id", IsForeignKey=true)]
		public Passenger Passenger
		{
			get
			{
				return this._Passenger.Entity;
			}
			set
			{
				Passenger previousValue = this._Passenger.Entity;
				if (((previousValue != value) 
							|| (this._Passenger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Passenger.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Passenger.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._IdPassenger = value.Id;
					}
					else
					{
						this._IdPassenger = default(int);
					}
					this.SendPropertyChanged("Passenger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentMasters(PaymentMaster entity)
		{
			this.SendPropertyChanging();
			entity.Booking = this;
		}
		
		private void detach_PaymentMasters(PaymentMaster entity)
		{
			this.SendPropertyChanging();
			entity.Booking = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Booking = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Booking = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GenderList")]
	public partial class GenderList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _GenderName;
		
		private EntitySet<Passenger> _Passengers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGenderNameChanging(string value);
    partial void OnGenderNameChanged();
    #endregion
		
		public GenderList()
		{
			this._Passengers = new EntitySet<Passenger>(new Action<Passenger>(this.attach_Passengers), new Action<Passenger>(this.detach_Passengers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GenderName
		{
			get
			{
				return this._GenderName;
			}
			set
			{
				if ((this._GenderName != value))
				{
					this.OnGenderNameChanging(value);
					this.SendPropertyChanging();
					this._GenderName = value;
					this.SendPropertyChanged("GenderName");
					this.OnGenderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GenderList_Passenger", Storage="_Passengers", ThisKey="Id", OtherKey="IdGender")]
		public EntitySet<Passenger> Passengers
		{
			get
			{
				return this._Passengers;
			}
			set
			{
				this._Passengers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Passengers(Passenger entity)
		{
			this.SendPropertyChanging();
			entity.GenderList = this;
		}
		
		private void detach_Passengers(Passenger entity)
		{
			this.SendPropertyChanging();
			entity.GenderList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Passenger")]
	public partial class Passenger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NIK;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.DateTime _Birthday;
		
		private int _IdGender;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Town;
		
		private string _PostCode;
		
		private EntitySet<Booking> _Bookings;
		
		private EntityRef<GenderList> _GenderList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNIKChanging(string value);
    partial void OnNIKChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    partial void OnIdGenderChanging(int value);
    partial void OnIdGenderChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    #endregion
		
		public Passenger()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			this._GenderList = default(EntityRef<GenderList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NIK", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string NIK
		{
			get
			{
				return this._NIK;
			}
			set
			{
				if ((this._NIK != value))
				{
					this.OnNIKChanging(value);
					this.SendPropertyChanging();
					this._NIK = value;
					this.SendPropertyChanged("NIK");
					this.OnNIKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdGender", DbType="Int NOT NULL")]
		public int IdGender
		{
			get
			{
				return this._IdGender;
			}
			set
			{
				if ((this._IdGender != value))
				{
					if (this._GenderList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdGenderChanging(value);
					this.SendPropertyChanging();
					this._IdGender = value;
					this.SendPropertyChanged("IdGender");
					this.OnIdGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Town", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostCode", DbType="VarChar(10)")]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this.OnPostCodeChanging(value);
					this.SendPropertyChanging();
					this._PostCode = value;
					this.SendPropertyChanged("PostCode");
					this.OnPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Booking", Storage="_Bookings", ThisKey="Id", OtherKey="IdPassenger")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GenderList_Passenger", Storage="_GenderList", ThisKey="IdGender", OtherKey="Id", IsForeignKey=true)]
		public GenderList GenderList
		{
			get
			{
				return this._GenderList.Entity;
			}
			set
			{
				GenderList previousValue = this._GenderList.Entity;
				if (((previousValue != value) 
							|| (this._GenderList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GenderList.Entity = null;
						previousValue.Passengers.Remove(this);
					}
					this._GenderList.Entity = value;
					if ((value != null))
					{
						value.Passengers.Add(this);
						this._IdGender = value.Id;
					}
					else
					{
						this._IdGender = default(int);
					}
					this.SendPropertyChanged("GenderList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = null;
		}
	}
}
#pragma warning restore 1591
